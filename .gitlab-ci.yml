# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

stages:
- test
- run
- package

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/



test:
  stage: test
  script:
      - echo "TEST"
    # - python setup.py test
    # - pip install tox flake8  # you can also use tox
    # - tox -e py36,flake8

run:
  stage: run
  script:
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - python test.py


docker:
  tags:
    - shell
  stage: package
  only:
    - master
  script:
    - echo "package docker"
    - docker info
    - docker login -u echo0821 -p Lkq2mapp565688 registry.hub.docker.com
    - docker build -t registry.hub.docker.com/echo0821/web-project:latest .
    - docker push registry.hub.docker.com/echo0821/web-project:latest
#    - docker tag registry.hub.docker.com/echo0821/web-project:latest registry.heroku.com/comp3019j-web-dev/web
#    - docker push registry.heroku.com/comp3019j-web-dev/web

#  timeout: 0h 1m
    # an alternative approach is to install and run:
    # - pip install dist/*
    # run the command here
#   artifacts:
#     paths:
#       - dist/*.whl

# pages:
#   script:
#     - pip install sphinx sphinx-rtd-theme
#     - cd doc ; make html
#     - mv build/html/ ../public/
#   artifacts:
#     paths:
#       - public
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
